
TEST_F(ArcadeGameTest, WalkAgainstWall ) {
	#define Base std::string("tests/filetests/WalkAgainstWall/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, TooMuchWeight ) {
	#define Base std::string("tests/filetests/TooMuchWeight/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, VeryHappyDay ) {
	#define Base std::string("tests/filetests/VeryHappyDay/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, WalkOutOfBoard ) {
	#define Base std::string("tests/filetests/WalkOutOfBoard/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, HappyDay ) {
	#define Base std::string("tests/filetests/HappyDay/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, PushBarrel ) {
	#define Base std::string("tests/filetests/PushBarrel/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, PushBarrelAgainstWall ) {
	#define Base std::string("tests/filetests/PushBarrelAgainstWall/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, BadXML_WrongPlace ) {
	#define Base std::string("tests/filetests/BadXML_WrongPlace/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}


TEST_F(ArcadeGameTest, PushBarrelOutOfBoard ) {
	#define Base std::string("tests/filetests/PushBarrelOutOfBoard/")

	TiXmlDocument doc_board, doc_moves;

	bool board_loaded = doc_board.LoadFile((Base + "Speelveld.xml").c_str());
	bool moves_loaded = doc_moves.LoadFile((Base + "Bewegingen.xml").c_str());

	EXPECT_TRUE(board_loaded && moves_loaded) << "Failed to load xml files.";
	
	std::ofstream new_cout;
	new_cout.open(Base+"output.txt");
	
	Game g = Game(doc_board, doc_moves, new_cout);
	
	std::ofstream output_file;
	
	output_file.open(Base+"ResterendeBewegingen_begin.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	g.doAllMoves(new_cout);
	new_cout.close();
	
	output_file.open(Base+"HuidigSpeelveld.txt");
	g.writeBoard(output_file);
	output_file.close();
	
	output_file.open(Base+"ResterendeBewegingen_einde.txt");
	g.writeMovements(output_file);
	output_file.close();
	
	EXPECT_TRUE(fileCompare(Base+"HuidigSpeelveld.txt", Base+"_HuidigSpeelveld.txt"));
	EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_begin.txt", Base+"_ResterendeBewegingen_begin.txt"));
    EXPECT_TRUE(fileCompare(Base+"ResterendeBewegingen_einde.txt", Base+"_ResterendeBewegingen_einde.txt"));
	EXPECT_TRUE(fileCompare(Base+"output.txt", Base+"_output.txt"));
}

